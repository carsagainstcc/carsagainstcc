{"version":3,"sources":["assets/image14.png","assets/image15.png","assets/image16.png","assets/image4.png","assets/image11.jpg","components/Logo/Logo.js","components/NavBar/NavBar.js","components/Hero/Hero.js","components/ImageCollection/ImageCollection.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","className","Component","NavBar","scrollToAbout","element","document","getElementById","scrollIntoView","scrollToDonate","scrollToContact","onClick","this","Hero","id","ImageCollection","src","imageOne","alt","imageTwo","imageThree","App","Image4","Image11","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,6PCc5BC,G,mLARX,OACE,yBAAKC,UAAU,QACX,wBAAIA,UAAU,UAAd,kC,GALSC,cCoCJC,G,kNAlCbC,cAAgB,WACd,IAAIC,EAAUC,SAASC,eAAe,SACvB,MAAXF,GACFA,EAAQG,kB,EAIZC,eAAiB,WACf,IAAIJ,EAAUC,SAASC,eAAe,UACvB,MAAXF,GACFA,EAAQG,kB,EAIZE,gBAAkB,WAChB,IAAIL,EAAUC,SAASC,eAAe,WACvB,MAAXF,GACFA,EAAQG,kB,uDAKV,OACE,yBAAKP,UAAU,UACX,yBAAKA,UAAU,wBACb,wBAAIA,UAAU,eAAeU,QAASC,KAAKR,eAA3C,SACA,wBAAIH,UAAU,eAAeU,QAASC,KAAKH,gBAA3C,UACA,wBAAIR,UAAU,eAAeU,QAASC,KAAKF,iBAA3C,iB,GA7BSR,cCqBNW,G,6KAbX,OACE,yBAAKZ,UAAU,QAEX,wBAAIA,UAAU,SAASa,GAAG,SAA1B,sCACA,uBAAGb,UAAU,SAZd,wLAaC,uBAAGA,UAAU,SAZd,iQAaC,uBAAGA,UAAU,SAZd,+QAaC,uBAAGA,UAAU,SAZd,wO,GAEUC,c,wDCWJa,E,uKAVX,OACE,yBAAKd,UAAU,mBACb,yBAAKe,IAAKC,IAAUC,IAAI,uBACxB,yBAAKF,IAAKG,IAAUD,IAAI,qBACxB,yBAAKF,IAAKI,IAAYF,IAAI,mB,GAPJhB,a,kCC0BfmB,E,uKAnBX,OACE,yBAAKpB,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,yBAAKA,UAAU,mBACb,yBAAKe,IAAKM,IAAQJ,IAAI,SAASjB,UAAU,gBACzC,kBAAC,EAAD,OAEF,yBAAKA,UAAU,mBACb,yBAAKe,IAAKO,IAASL,IAAI,gBAAgBjB,UAAU,iBAEnD,kBAAC,EAAD,W,GAhBUC,aCEEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzB,SAASC,eAAe,SDyHpB,kBAAmByB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.290feeb1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image14.c67826cd.png\";","module.exports = __webpack_public_path__ + \"static/media/image15.ca8da2c8.png\";","module.exports = __webpack_public_path__ + \"static/media/image16.3aa07695.png\";","module.exports = __webpack_public_path__ + \"static/media/image4.82bfaf72.png\";","module.exports = __webpack_public_path__ + \"static/media/image11.7f633938.jpg\";","import React, { Component } from 'react';\nimport './Logo.css';\n\nclass Logo extends Component {\n\n  render() {\n    return (\n      <div className=\"logo\">\n          <h1 className=\"logoH1\">Cars Against Colon Cancer</h1>\n      </div>\n    );\n  }\n}\n\nexport default Logo;","import React, { Component } from 'react';\nimport './NavBar.css';\n\nclass NavBar extends Component {\n\n  scrollToAbout = () => {\n    let element = document.getElementById(\"about\")\n    if (element != null) {\n      element.scrollIntoView()\n    }\n  }\n\n  scrollToDonate = () => {\n    let element = document.getElementById(\"donate\")\n    if (element != null) {\n      element.scrollIntoView()\n    }\n  }\n\n  scrollToContact = () => {\n    let element = document.getElementById(\"contact\")\n    if (element != null) {\n      element.scrollIntoView()\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"navBar\">\n          <div className=\"navBarItemCollection\">\n            <h1 className=\"navBarButton\" onClick={this.scrollToAbout}>About</h1>\n            <h1 className=\"navBarButton\" onClick={this.scrollToDonate}>Donate</h1>\n            <h1 className=\"navBarButton\" onClick={this.scrollToContact}>Contact</h1>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default NavBar;","import React, { Component } from 'react';\nimport './Hero.css';\n\nlet p1 = \"Cars Against Colon Cancer is intended to raise awareness and requests voluntary donations for the American Cancer Society. The donations are targeted for research for colon cancer.\"\nlet p2 = \"Benjamin established Cars Against Colon Cancer when his grandmother, Ellen Lerman, was diagnosed with colon cancer in 2015. Despite her valiant efforts to combat the disease she passed away June 22, 2018. This year’s car show celebrates her memory.\"\nlet p3 = \" At the first car show in 2016, Benjamin was a junior at the Kingswood Oxford School in West Hartford. Kingswood Oxford hosted the show on their school grounds in both 2016 and 2017. Last year, as well as this year, New Country Mercedes Benz of Hartford is the venue.\"\nlet p4 = \"Private car owners, dealerships and car clubs display cars to support Benjamin’s cause. It is expected that, like previous years, cars such as Pagani, Ferrari, Porsche, Mercedes Benz, Jaguar, … will be on exhibit.\"\n\nclass Hero extends Component {\n\n  render() {\n    return (\n      <div className=\"hero\">\n\n          <h1 className=\"heroH1\" id=\"about\">About Cars Against Colon Cancer...</h1>\n          <p className=\"heroP\">{p1}</p>\n          <p className=\"heroP\">{p2}</p>\n          <p className=\"heroP\">{p3}</p>\n          <p className=\"heroP\">{p4}</p>\n      </div>\n    );\n  }\n}\n\nexport default Hero;","import React, { Component } from 'react';\nimport './ImageCollection.css';\nimport imageOne from '../../assets/image14.png';\nimport imageTwo from '../../assets/image15.png';\nimport imageThree from '../../assets/image16.png';\n\nclass ImageCollection extends Component {\n\n  render() {\n    return (\n      <div className=\"imageCollection\">\n        <img src={imageOne} alt=\"West Hartford News\"/>\n        <img src={imageTwo} alt=\"Hartford Courant\"/>\n        <img src={imageThree} alt=\"we-ha.com\"/>\n      </div>\n    );\n  }\n}\n\nexport default ImageCollection;","import React, { Component } from 'react';\nimport './App.css';\nimport Logo from './components/Logo/Logo';\nimport NavBar from './components/NavBar/NavBar';\nimport Hero from './components/Hero/Hero';\nimport ImageCollection from './components/ImageCollection/ImageCollection';\n\nimport Image4 from './assets/image4.png';\nimport Image11 from './assets/image11.jpg';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"appHeader\">\n          <Logo/>\n          <NavBar/>\n        </div>\n        <div className=\"appContainerOne\">\n          <img src={Image4} alt=\"Pagani\" className=\"appImageOne\"/>\n          <Hero/>\n        </div>\n        <div className=\"appContainerTwo\">\n          <img src={Image11} alt=\"Cars Lined Up\" className=\"appImageTwo\"/>\n        </div>\n        <ImageCollection/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}